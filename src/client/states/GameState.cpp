#include "GameState.h"


GameState::GameState(sf::RenderWindow* window, int& stateIndex):
    State(window),
    stateIndex(stateIndex)
{   
    player.setPosition({10,10});player.load("assets/player.png", {64,64});
    inventory.load("assets/inventory_slot.png", {32,32});

    const int level[] = {
    17,19,18,17,17,19,16,16,16,18,16,16,16,19,18,18,16,17,18,16,17,16,17,16,17,16,16,19,18,19,19,18,17,18,18,19,19,18,19,19,
19,19,17,19,17,16,16,17,17,19,17,17,19,19,18,18,18,18,17,19,18,19,18,17,17,16,16,16,16,16,19,19,18,17,17,19,16,17,18,16,
18,19,18,18,18,19,16,17,18,16,18,19,19,19,17,16,19,18,18,17,17,18,17,19,17,16,19,17,17,18,16,19,17,18,17,17,16,17,16,18,
19,16,16,19,17,18,18,17,17,17,16,17,17,19,18,16,18,17,16,16,17,17,17,19,19,17,17,19,16,18,18,16,18,18,18,16,18,19,16,16,
17,17,17,16,17,19,18,17,18,17,18,17,18,16,16,19,17,18,19,18,17,16,18,16,18,18,17,17,17,16,17,18,19,18,17,18,17,17,19,16,
17,19,16,16,17,19,18,18,17,19,17,17,17,19,18,16,18,19,16,17,18,18,19,17,18,18,19,18,19,18,18,19,17,19,18,16,18,17,19,19,
17,19,18,18,17,19,16,18,19,18,19,19,16,18,17,19,16,16,19,19,17,18,16,19,17,18,17,16,17,16,16,17,16,17,17,19,18,18,16,17,
19,19,19,19,19,19,17,19,17,19,18,19,17,19,16,16,18,19,19,18,17,18,18,19,18,19,17,16,18,16,16,16,18,19,16,17,19,16,16,19,
17,16,19,16,18,17,19,17,19,16,16,19,17,16,19,17,19,19,19,16,17,17,17,16,16,19,19,16,17,19,18,19,17,17,18,16,17,18,16,19,
17,16,17,19,17,17,18,18,18,16,18,19,19,17,19,16,16,17,19,18,18,19,16,19,17,19,19,17,16,16,16,18,18,18,17,17,18,16,18,19,
19,17,17,17,16,19,19,19,19,16,19,16,19,17,19,16,16,18,18,18,16,19,18,19,19,18,18,16,17,18,17,17,18,18,18,18,17,19,18,17,
16,17,17,18,16,18,19,16,19,16,19,19,18,17,19,16,19,19,19,17,17,17,16,19,18,19,18,18,19,16,18,18,17,17,17,18,16,16,17,19,
16,17,19,16,18,17,18,17,17,17,19,16,16,18,17,19,18,19,17,17,18,18,19,17,18,17,16,19,18,19,18,18,16,17,19,19,17,16,16,16,
17,18,19,19,18,19,18,17,17,19,19,17,18,18,19,6,17,18,19,19,16,17,17,18,19,19,18,16,19,17,18,17,19,16,16,16,16,18,16,18,
17,18,18,18,19,19,19,16,17,19,17,16,18,18,16,19,6,17,19,19,17,17,16,18,19,16,18,19,16,18,19,19,17,18,16,19,17,16,17,16,
18,18,18,18,19,18,19,19,18,18,17,19,18,17,7,9,10,6,16,18,16,18,17,6,6,6,17,16,18,18,16,19,19,17,18,19,17,17,18,16,
18,17,19,17,19,19,19,18,16,16,19,18,6,6,11,12,8,9,9,9,9,9,9,9,10,6,6,6,6,6,6,16,18,19,17,19,17,19,17,19,
17,19,18,16,16,19,19,18,19,19,7,9,9,9,15,12,12,12,12,12,12,12,12,12,8,9,9,9,9,9,10,6,18,17,18,18,16,18,17,19,
16,18,19,16,17,17,19,17,19,17,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,1,6,6,17,19,17,17,17,16,18,
18,19,17,18,19,18,16,17,16,18,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,1,6,6,6,6,18,16,17,19,18,
19,17,16,18,17,16,17,16,16,18,2,3,3,3,3,3,0,12,12,12,12,12,12,12,12,12,12,12,12,12,8,9,10,6,6,18,17,16,16,19,
19,18,19,16,19,19,19,17,16,16,16,6,17,6,18,6,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,8,9,10,6,17,17,19,19,
16,17,18,16,19,19,17,17,16,17,18,19,19,19,16,6,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,1,6,19,18,17,18,
19,17,19,18,16,18,17,16,17,18,16,18,17,18,17,17,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,1,18,17,16,19,18,
16,17,16,19,18,16,17,17,17,18,16,17,17,16,16,16,2,3,3,3,0,12,12,12,12,12,12,12,12,12,12,12,12,12,1,19,17,17,18,19,
18,16,18,16,19,17,18,17,17,16,19,17,16,16,17,17,6,6,6,6,11,12,12,12,12,12,12,12,12,12,12,13,3,3,5,16,16,18,17,19,
19,17,18,16,18,18,17,19,17,16,17,17,16,18,19,19,16,18,6,6,11,12,12,12,12,12,12,12,12,12,12,1,17,6,6,19,19,19,19,19,
18,19,19,17,16,19,16,17,17,16,19,18,18,17,16,17,16,19,6,6,11,12,12,12,12,12,12,12,12,12,12,1,17,17,6,18,19,18,16,17,
17,17,19,16,17,19,19,19,16,18,16,19,18,17,19,16,17,16,16,6,11,12,12,12,12,12,12,12,13,3,3,5,16,6,6,18,17,16,18,17,
19,18,18,18,17,18,17,17,17,18,19,17,19,19,18,17,17,19,16,16,2,3,3,3,3,3,3,3,5,16,6,6,6,6,18,19,19,18,19,18,
17,17,18,16,17,17,19,17,16,16,19,19,16,16,18,16,17,16,17,17,19,6,6,6,6,6,6,6,6,6,6,17,6,6,18,18,18,19,19,19,
17,16,17,17,18,18,17,19,18,19,17,18,18,17,17,18,19,17,19,17,18,18,18,16,6,6,16,19,19,17,17,19,19,16,17,19,18,18,18,18,
16,19,17,19,17,18,18,19,18,16,17,17,19,16,19,18,17,18,18,18,19,16,18,18,19,18,18,16,18,16,19,19,17,16,16,17,17,19,16,16,
19,16,16,16,17,18,17,17,19,19,19,16,17,18,16,17,19,18,17,18,18,16,17,16,19,16,19,17,19,18,19,17,17,16,18,16,17,18,16,18,
17,17,16,19,16,16,18,19,18,18,19,18,18,17,16,17,19,16,16,19,17,16,18,18,17,18,19,17,17,17,19,19,18,16,17,18,16,17,18,16,
17,19,17,16,19,17,18,16,17,18,18,16,18,18,16,16,18,16,19,19,17,19,18,18,17,17,19,17,16,18,18,18,18,18,18,18,17,16,18,17,
17,16,16,19,16,17,19,16,16,19,16,17,17,17,19,18,19,19,16,18,17,17,16,17,19,18,17,16,16,19,17,19,19,19,16,19,16,16,18,16,
17,18,18,18,17,17,19,18,18,17,16,17,16,19,16,16,17,18,16,18,18,18,16,18,17,19,19,18,19,17,17,18,19,16,17,19,19,17,19,19,
17,16,16,19,16,19,16,18,16,16,17,17,18,19,18,19,16,18,19,18,18,16,19,16,16,18,16,16,16,18,16,16,18,17,19,17,17,19,19,18,
17,18,18,18,16,19,17,17,18,16,16,19,17,18,17,18,17,19,18,19,18,17,18,18,18,16,16,18,17,16,16,19,16,18,19,19,19,19,18,17
};

    // 'assets/tileset.png' should be a tileset image, and the tiles indices (0,1,...) must match it.
    if(!map.load("assets/tilemaps/GroundTilemap.png", sf::Vector2u(32, 32), level, 40, 40)){
        throw "ERROR::GAMESTATE::FAILED_TO_LOAD_MAP";
    }
}

GameState::~GameState()
{
}

void GameState::render(sf::RenderWindow* target){
    target->setView(player.playerView);

    target->draw(map);
    target->draw(player);
    target->draw(inventory);
}

void GameState::update(sf::Time deltaTIme){
    this->updateMousePositions();
    player.update(deltaTIme);

    inventory.setPosition( player.getPosition() + sf::Vector2f(50.f, 50.f));
    
}

void GameState::gui(){
    
}

void GameState::processEvents(const sf::Event event){
    if (const auto keyPressed = event.getIf<sf::Event::KeyPressed>())
        {
            if (keyPressed->scancode == sf::Keyboard::Scancode::Escape){
                changeState(stateIndex, 0);
            }
            else if(keyPressed->scancode == sf::Keyboard::Scancode::I){
                inventory.isActive = !inventory.isActive;
            }  
        }
}
